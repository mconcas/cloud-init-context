#!/bin/bash

#
# ssh-hosts-keys -- by Dario Berzano <dario.berzano@cern.ch>
#
# Wrapper around edg-pbs-knownhosts and edg-pbs-shostsequiv that invokes them
# together and features locking to prevent simultaneous access to the same keys
# and hosts files.
#
# It runs in delete, update or delete-update mode.
#
# Update mode simply runs the aforementioned scripts.
#
# Delete mode deletes the keys from the specified host from the proper files.
#
# Delete and update first deletes the specified host, then it updates the files:
# useful when a specific hostname has an updated hostkey.
#
# Syntax:
#
#  [sudo] ssh-hosts-keys [delete|update|delete-update] [hostname_or_ip]
#

#
# Global variables
#

# EDG scripts (full paths)
#export EdgKnownHostsBin=/opt/edg/sbin/edg-pbs-knownhosts
#export EdgShostsEquivBin=/opt/edg/sbin/edg-pbs-shostsequiv
export EdgKnownHostsBin=/usr/sbin/edg-pbs-knownhosts
export EdgShostsEquivBin=/usr/sbin/edg-pbs-shostsequiv

# SSH relevant files
export KnownHosts=/etc/ssh/ssh_known_hosts
export ShostsEquiv=/etc/ssh/shosts.equiv

# Variables for locking
export WaitTimeoutSecs=120
export LockDir=/tmp/ssh-hosts-keys.lock
export LockLimitSecs=120

#
# Functions
#

# Waits until the specified command finishes, or until the timeout has been
# reached. Returns 0 on success, 1 if returned upon timeout
function Wait() {

  local FullCmd="$1"
  local CountSecs=0
  local Err=0

  while [ `ps -e -o command | grep -v grep | grep -c " $FullCmd "` -gt 0 ]
  do
    sleep 1
    let CountSecs++
    if [ $CountSecs -ge $WaitTimeoutSecs ]; then
      Err=1
      break
    fi
  done

  [ $Err == 1 ] && echo "Command $FullCmd still running after $WaitTimeoutSecs"
  return $Err

}

# Removes the given host (three parameters: 1:ip, 2:short_name, 3:fqdn) from
# shosts.equiv ahd ssh_known_hosts. Rudimentary "wait" is performed
function Delete() {

  local Ip=$1
  local ShortHost=$2
  local Host=$3

  # Manage shosts.equiv
  Wait "$EdgShostsEquivBin" || return 1
  egrep -v "$Host|$Ip" "$ShostsEquiv" > "$ShostsEquiv".0
  mv "$ShostsEquiv".0 "$ShostsEquiv"

  # Manage ssh_known_hosts
  Wait "$EdgKnownHostsBin" || return 1
  egrep -v "$Host|$Ip" "$KnownHosts" > "$KnownHosts".0
  mv "$KnownHosts".0 "$KnownHosts"

}

# Invoke scripts that add new hosts from pbsnodes in shosts.equiv and
# ssh_known_hosts
function Update() {

  Wait "$EdgShostsEquivBin" || return 1
  "$EdgShostsEquivBin" || return 1

  Wait "$EdgKnownHostsBin" || return 1
  "$EdgKnownHostsBin" || return 1

}

# Lock and wait
function LockWait() {

  local LockCount=0
  local LockErr=0

  # mkdir is (should be!) atomic
  while ! mkdir $LockDir ; do
    sleep 1
    let LockCount++
    if [ $LockCount == $LockLimitSecs ]; then
      LockErr=1
      break
    fi
  done

  # Lock unsuccessful: be verbose
  if [ $LockErr == 1 ]; then
    echo "Cannot obtain lock: maybe stale $LockDir directory?"
    return 1
  fi

  # Lock successful: trap everything trappable for safety reasons. Lock will be
  # removed automatically on exit, so no need to do it manually
  trap 'Unlock' 0
  return 0
}

# Remove lock
function Unlock() {
  rmdir $LockDir > /dev/null 2>&1
}

# Main function
function Main() {

  local Cmd="$1"
  local Host="$2"
  local Getent Ip ShortHost

  # Check parameters
  if [ "$Cmd" == '' ]; then
    echo 'No command specified! Try: delete update delete-update'
    exit 1
  elif [ "$Cmd" == 'delete' ] || [ "$Cmd" == 'delete-update' ]; then
    if [ "$Host" == '' ]; then
      echo 'delete and delete-update require a hostname or IP'
      exit 1
    fi
  fi

  # Get IP, hostname (FQDN), short hostname
  if [ "$Host" != '' ]; then
    Getent=`getent hosts $Host`
    Ip=`echo $Getent | awk '{ print $1 }'`
    Host=`echo $Getent | awk '{ print $2 }'`
    ShortHost=`echo $Host | cut -d. -f1`
  fi

  # Lock (wait) for safety: unlock is automatic upon exit/kill
  LockWait || return 1

  # Command
  if [ "$Cmd" == 'update' ]; then
    Update || exit 1
  elif [ "$Cmd" == 'delete' ]; then
    Delete $Ip $ShortHost $Host || exit 1
  elif [ "$Cmd" == 'delete-update' ]; then
    Delete $Ip $ShortHost $Host || exit 1
    Update || exit 1
  else
    echo "Unknown command: $Cmd"
    exit 1
  fi

}

#
# Entry point
#

Main "$@"
